# main.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import atexit
import argparse
import os
import sys
from mitm_starter import StartMitm
from security import verify_machine
from config_loader import load_accounts

mitm_process = None

def cleanup():
    global mitm_process
    if mitm_process and mitm_process.poll() is None:
        mitm_process.terminate()
        mitm_process.wait()
    # –£–¥–∞–ª–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–∫–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ

def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ê–†–ì–£–ú–ï–ù–¢–ê–• ---
    parser.add_argument(
        '--nickname', 
        type=str, 
        required=True, # –ê—Ä–≥—É–º–µ–Ω—Ç —Å—Ç–∞–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
        help='–ù–∏–∫–Ω–µ–π–º –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ valera.txt, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–æ—Ç.'
    )
    # –ê—Ä–≥—É–º–µ–Ω—Ç --port —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Ä—Ç –±–µ—Ä–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞
    parser.add_argument(
        '--upstream-proxy', 
        type=str, 
        default=None, 
        help='–ê–¥—Ä–µ—Å –≤–Ω–µ—à–Ω–µ–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è mitmdump –≤ —Ñ–æ—Ä–º–∞—Ç–µ http[s]://host:port.'
    )
    parser.add_argument('--ply', type=int, default=2, help='–£—Ä–æ–≤–µ–Ω—å –∞–Ω–∞–ª–∏–∑–∞ (plies) –¥–ª—è GNU Backgammon.')
    parser.add_argument('--noise', type=float, default=0.01, help='–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (noise) –¥–ª—è GNU Backgammon.')
    
    args = parser.parse_args()

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ö–û–ù–§–ò–ì–ê ---
    accounts = load_accounts()
    if not accounts:
        print("–í valera.txt –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    account_config = accounts.get(args.nickname)
    if not account_config:
        print(f"–û–®–ò–ë–ö–ê: –ê–∫–∫–∞—É–Ω—Ç —Å –Ω–∏–∫–æ–º '{args.nickname}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ valera.txt.")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {list(accounts.keys())}")
        return
    
    print("\n--- üöÄ –ó–ê–ü–£–°–ö –î–õ–Ø –ê–ö–ö–ê–£–ù–¢–ê ---")
    print(f"  üë§ –ù–∏–∫–Ω–µ–π–º:      {account_config.nickname}")
    print(f"  üÜî ID –∏–≥—Ä–æ–∫–∞:    {account_config.player_id[:12]}...")
    print(f"  üì± –≠–º—É–ª—è—Ç–æ—Ä:     {account_config.emulator_id}")
    print(f"  üåê –ü–æ—Ä—Ç MITM:    {account_config.mitm_port}")
    print(f"  üìã –§–∞–π–ª –ª–æ–≥–æ–≤:   {os.path.basename(account_config.log_path)}")
    print("-----------------------------\n")

    # --- –£–°–¢–ê–ù–û–í–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---
    # –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É–¥—É—Ç "–≤–∏–¥–Ω—ã" –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º –º–æ–¥—É–ª—è–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º
    os.environ['MITM_LOG_FILE'] = account_config.log_path
    os.environ['TARGET_EMULATOR'] = account_config.emulator_id
    os.environ['HERO_PLAYER_ID'] = account_config.player_id

    verify_machine()
    global mitm_process
    atexit.register(cleanup)
    
    from log_parser import StartParsing
    # –ó–∞–ø—É—Å–∫–∞–µ–º mitmdump —Å –ø–æ—Ä—Ç–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    mitm_process = StartMitm(port=account_config.mitm_port, upstream_proxy=args.upstream_proxy)
    
    if not mitm_process:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å mitmdump. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
        return
        
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –ø—É—Ç–µ–º –∫ –ª–æ–≥-—Ñ–∞–π–ª—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    StartParsing(account_config.log_path)

if __name__ == '__main__':
    main()