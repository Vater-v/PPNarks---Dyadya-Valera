#!/usr/bin/env python3
"""
–£–¥–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
"""
import os
import sys
import json
import argparse
from pathlib import Path

def create_default_config(config_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    default_config = {
        "work_dir": str(Path.cwd()),
        "adb": {
            "host": "127.0.0.1",
            "port": 5037
        },
        "proxy": {
            "port": 8080,
            "upstream": None
        },
        "gnubg": {
            "ply": 2,
            "noise": 0.01
        },
        "bot": {
            "log_level": 1,  # IMPORTANT
            "auto_play": True
        }
    }
    
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(default_config, f, indent=2, ensure_ascii=False)
    
    print(f"‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_path}")
    return default_config

def load_config(config_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(config_path):
        return create_default_config(config_path)
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("–ò—Å–ø–æ–ª—å–∑—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        return create_default_config(config_path + ".backup")

def main():
    parser = argparse.ArgumentParser(
        description="Backgammon Bot - —É–¥–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python run_bot.py                    # –ó–∞–ø—É—Å–∫ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  python run_bot.py --config my.json   # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥
  python run_bot.py --log-level 0      # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
  python run_bot.py --no-auto          # –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∏–≥—Ä—É
  python run_bot.py --adb 192.168.1.100:5037  # –£–¥–∞–ª–µ–Ω–Ω—ã–π —ç–º—É–ª—è—Ç–æ—Ä
        """
    )
    
    parser.add_argument('--config', default='bot_config.json',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: bot_config.json)')
    parser.add_argument('--work-dir',
                       help='–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--adb',
                       help='ADB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ host:port (–Ω–∞–ø—Ä–∏–º–µ—Ä: 127.0.0.1:5037)')
    parser.add_argument('--proxy-port', type=int,
                       help='–ü–æ—Ä—Ç –¥–ª—è mitmdump –ø—Ä–æ–∫—Å–∏')
    parser.add_argument('--upstream-proxy',
                       help='–í–Ω–µ—à–Ω–∏–π –ø—Ä–æ–∫—Å–∏ (—Ñ–æ—Ä–º–∞—Ç: http://host:port)')
    parser.add_argument('--ply', type=int, choices=[1, 2, 3, 4],
                       help='–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ GNU Backgammon (1-4)')
    parser.add_argument('--noise', type=float,
                       help='–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ GNU Backgammon (0.0-1.0)')
    parser.add_argument('--log-level', type=int, choices=[0, 1, 2, 3, 4],
                       help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (0=–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ, 1=–≤–∞–∂–Ω—ã–µ, 2=–∏–Ω—Ñ–æ, 3=–æ—Ç–ª–∞–¥–∫–∞, 4=–ø–æ–¥—Ä–æ–±–Ω–æ)')
    parser.add_argument('--no-auto', action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É')
    parser.add_argument('--save-config', action='store_true',
                       help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config(args.config)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.work_dir:
        config['work_dir'] = args.work_dir
    
    if args.adb:
        try:
            host, port = args.adb.split(':')
            config['adb']['host'] = host
            config['adb']['port'] = int(port)
        except ValueError:
            print(f"‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADB: {args.adb}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ host:port")
            sys.exit(1)
    
    if args.proxy_port:
        config['proxy']['port'] = args.proxy_port
    
    if args.upstream_proxy:
        config['proxy']['upstream'] = args.upstream_proxy
    
    if args.ply:
        config['gnubg']['ply'] = args.ply
    
    if args.noise is not None:
        config['gnubg']['noise'] = args.noise
    
    if args.log_level is not None:
        config['bot']['log_level'] = args.log_level
    
    if args.no_auto:
        config['bot']['auto_play'] = False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if args.save_config:
        with open(args.config, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        print(f"‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {args.config}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ['BOT_WORK_DIR'] = config['work_dir']
    os.environ['ADB_HOST'] = config['adb']['host']
    os.environ['ADB_PORT'] = str(config['adb']['port'])
    os.environ['BOT_LOG_LEVEL'] = str(config['bot']['log_level'])
    os.environ['BOT_AUTO_PLAY'] = 'true' if config['bot']['auto_play'] else 'false'
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    work_dir = Path(config['work_dir'])
    (work_dir / 'logs').mkdir(parents=True, exist_ok=True)
    (work_dir / 'data').mkdir(parents=True, exist_ok=True)
    
    # –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\n" + "="*50)
    print("     BACKGAMMON BOT - –ó–ê–ü–£–°–ö")
    print("="*50)
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {config['work_dir']}")
    print(f"üì± ADB: {config['adb']['host']}:{config['adb']['port']}")
    print(f"üåê –ü—Ä–æ–∫—Å–∏ –ø–æ—Ä—Ç: {config['proxy']['port']}")
    if config['proxy'].get('upstream'):
        print(f"üîó –í–Ω–µ—à–Ω–∏–π –ø—Ä–æ–∫—Å–∏: {config['proxy']['upstream']}")
    print(f"üé≤ GNU Backgammon: ply={config['gnubg']['ply']}, noise={config['gnubg']['noise']}")
    print(f"üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤: {config['bot']['log_level']} ({['CRITICAL', 'IMPORTANT', 'INFO', 'DEBUG', 'VERBOSE'][config['bot']['log_level']]})")
    print(f"üéÆ –ê–≤—Ç–æ–∏–≥—Ä–∞: {'‚úì' if config['bot']['auto_play'] else '‚úó'}")
    print("="*50 + "\n")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞
    cmd_parts = [
        sys.executable,  # Python –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
        'main.py',
        '--port', str(config['proxy']['port']),
        '--ply', str(config['gnubg']['ply']),
        '--noise', str(config['gnubg']['noise']),
    ]
    
    if config['proxy'].get('upstream'):
        cmd_parts.extend(['--upstream-proxy', config['proxy']['upstream']])
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.chdir(config['work_dir'])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
    import subprocess
    try:
        result = subprocess.run(cmd_parts, check=False)
        sys.exit(result.returncode)
    except KeyboardInterrupt:
        print("\n\n‚ö† –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()